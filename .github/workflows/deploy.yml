name: Deploy Lambda to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: 'us-east-1'
  LAMBDA_FUNCTION_NAME: 'cpf-cognito-lambda-handler'

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Criar .env dinamicamente
      run: |
        echo "üîß Criando .env..."
        cat > .env << EOF
        COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }}
        NODE_ENV=production
        AWS_REGION=us-east-1
        EOF
        echo "‚úÖ .env criado com sucesso!"

    - name: Instalar depend√™ncias e empacotar Lambda
      run: |
        npm ci --production
        zip -r function.zip src/ node_modules/ package.json .env
        echo "üì¶ Package criado: function.zip"

    - name: Criar ou verificar Role IAM
      run: |
        echo "üõ°Ô∏è Verificando/Criando Role IAM..."
        
        if aws iam get-role --role-name cpf-cognito-lambda-role 2>/dev/null; then
          echo "‚úÖ Role IAM j√° existe, continuando..."
        else
          echo "üìù Criando nova Role IAM..."
          aws iam create-role \
            --role-name cpf-cognito-lambda-role \
            --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}' \
            --description "Role para Lambda CPF Cognito"
          
          echo "‚è≥ Aguardando role ficar dispon√≠vel..."
          sleep 10
        fi
        
        echo "üìã Anexando pol√≠ticas √† role..."
        aws iam attach-role-policy \
          --role-name cpf-cognito-lambda-role \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || echo "‚ÑπÔ∏è Pol√≠tica b√°sica j√° anexada"
        
        echo "üîê Configurando pol√≠tica customizada do Cognito..."
        aws iam put-role-policy \
          --role-name cpf-cognito-lambda-role \
          --policy-name CognitoAccess \
          --policy-document '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "cognito-idp:AdminGetUser",
                  "cognito-idp:SignUp", 
                  "cognito-idp:AdminInitiateAuth",
                  "cognito-idp:AdminSetUserPassword",
                  "cognito-idp:AdminCreateUser"
                ],
                "Resource": "arn:aws:cognito-idp:us-east-1:'$(aws sts get-caller-identity --query Account --output text)':userpool/'${{ secrets.COGNITO_USER_POOL_ID }}'"
              }
            ]
          }'
        
        echo "‚úÖ Role IAM configurada com sucesso!"

    - name: Criar ou atualizar Lambda Function
      run: |
        echo "üöÄ Verificando/Criando Lambda Function..."
        
        ROLE_ARN=$(aws iam get-role --role-name cpf-cognito-lambda-role --query 'Role.Arn' --output text)
        echo "üîß Usando Role: $ROLE_ARN"
        
        if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME 2>/dev/null; then
          echo "üîÑ Lambda j√° existe, atualizando c√≥digo..."
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --zip-file fileb://function.zip
          
          echo "‚öôÔ∏è Atualizando configura√ß√£o da Lambda..."
          aws lambda update-function-configuration \
            --function-name $LAMBDA_FUNCTION_NAME \
            --environment "Variables={COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }},COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }},NODE_ENV=production}" \
            --timeout 15 \
            --memory-size 128 \
            --role "$ROLE_ARN" || echo "‚ÑπÔ∏è Configura√ß√£o j√° atualizada"
        else
          echo "üìù Criando nova Lambda Function..."
          aws lambda create-function \
            --function-name $LAMBDA_FUNCTION_NAME \
            --runtime nodejs18.x \
            --role "$ROLE_ARN" \
            --handler src/handlers/cpfHandler.handler \
            --zip-file fileb://function.zip \
            --environment "Variables={COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }},COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }},NODE_ENV=production}" \
            --timeout 15 \
            --memory-size 128
        fi
        
        echo "‚úÖ Lambda Function configurada com sucesso!"

    - name: Aguardar Lambda ficar ativa
      run: |
        echo "‚è≥ Aguardando Lambda ficar totalmente ativa..."
        
        # Espera at√© a Lambda sair do estado Pending
        for i in {1..30}; do
          LAMBDA_STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME --query 'Configuration.State' --output text 2>/dev/null || echo "Pending")
          echo "Estado da Lambda: $LAMBDA_STATE (tentativa $i/30)"
          
          if [ "$LAMBDA_STATE" = "Active" ]; then
            echo "‚úÖ Lambda est√° ATIVA e pronta!"
            break
          fi
          
          if [ $i -eq 30 ]; then
            echo "‚ùå Timeout: Lambda n√£o ficou ativa em 30 tentativas"
            exit 1
          fi
          
          sleep 5
        done

    - name: Configurar API Gateway
      run: |
        echo "üåê Configurando API Gateway..."
        
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='cpf-cognito-api'].id" --output text)
        
        if [ -z "$API_ID" ]; then
          echo "üìù Criando novo API Gateway..."
          API_ID=$(aws apigateway create-rest-api \
            --name "cpf-cognito-api" \
            --description "API para autentica√ß√£o com CPF" \
            --endpoint-configuration types=REGIONAL \
            --query 'id' \
            --output text)
          
          echo "‚úÖ API Gateway criado: $API_ID"
          
          # Obt√©m o root resource ID
          ROOT_ID=$(aws apigateway get-resources \
            --rest-api-id $API_ID \
            --query 'items[?path=='\''/'\''].id' \
            --output text)
          
          # Cria resource /auth
          RESOURCE_ID=$(aws apigateway create-resource \
            --rest-api-id $API_ID \
            --parent-id $ROOT_ID \
            --path-part "auth" \
            --query 'id' \
            --output text)
          
          # Configura m√©todo POST
          aws apigateway put-method \
            --rest-api-id $API_ID \
            --resource-id $RESOURCE_ID \
            --http-method POST \
            --authorization-type NONE
          
          # Configura integra√ß√£o com Lambda
          aws apigateway put-integration \
            --rest-api-id $API_ID \
            --resource-id $RESOURCE_ID \
            --http-method POST \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:$(aws sts get-caller-identity --query Account --output text):function:cpf-cognito-lambda-handler/invocations"
          
          # Configura responses para CORS
          aws apigateway put-method-response \
            --rest-api-id $API_ID \
            --resource-id $RESOURCE_ID \
            --http-method POST \
            --status-code 200 \
            --response-parameters '{"method.response.header.Access-Control-Allow-Origin":true}'
          
          # Cria deployment
          aws apigateway create-deployment \
            --rest-api-id $API_ID \
            --stage-name "production"
          
          # Adiciona permiss√£o para API Gateway invocar Lambda
          aws lambda add-permission \
            --function-name $LAMBDA_FUNCTION_NAME \
            --statement-id api-gateway-invoke \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "arn:aws:execute-api:us-east-1:$(aws sts get-caller-identity --query Account --output text):$API_ID/*/POST/auth"
          
          echo "üéØ API Gateway configurado com sucesso!"
        else
          echo "‚úÖ API Gateway j√° existe: $API_ID"
        fi

    - name: Teste completo da solu√ß√£o
      run: |
        echo "üß™ TESTE COMPLETO DA SOLU√á√ÉO"
        echo "================================"
        
        # Obt√©m o API ID
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='cpf-cognito-api'].id" --output text)
        API_URL="https://$API_ID.execute-api.us-east-1.amazonaws.com/production/auth"
        
        echo "üîó URL da API: $API_URL"
        echo ""
        echo "üìã COMANDO CURL PARA TESTAR:"
        echo "curl -X POST '$API_URL' \\"
        echo "  -H 'Content-Type: application/json' \\"
        echo "  -d '{\"cpf\":\"12345678909\"}'"
        echo ""
        echo "‚è≥ Executando teste autom√°tico..."
        
        # Testa a API
        RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" -X POST "$API_URL" \
          -H "Content-Type: application/json" \
          -d '{"cpf":"12345678909"}' 2>/dev/null || echo "CONNECTION_ERROR")
        
        # Extrai o HTTP status
        HTTP_STATUS=$(echo "$RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
        BODY=$(echo "$RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
        
        echo "üìä RESULTADO DO TESTE:"
        echo "HTTP Status: $HTTP_STATUS"
        echo "Resposta: $BODY"
        
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "üéâ SUCESSO! A solu√ß√£o est√° funcionando perfeitamente!"
          echo "‚úÖ CPF validado"
          echo "‚úÖ Cognito integrado" 
          echo "‚úÖ JWT gerado"
          echo "‚úÖ API Gateway respondendo"
        else
          echo "‚ö†Ô∏è Teste retornou status $HTTP_STATUS"
          echo "üìù Verifique os logs da Lambda para detalhes"
        fi

    - name: Verificar deploy final
      run: |
        echo "üéâ DEPLOY COMPLETO E TESTADO!"
        echo "================================"
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='cpf-cognito-api'].id" --output text)
        API_URL="https://$API_ID.execute-api.us-east-1.amazonaws.com/production/auth"
        
        echo "‚úÖ Lambda: $LAMBDA_FUNCTION_NAME"
        echo "‚úÖ API Gateway: $API_ID"
        echo "‚úÖ Regi√£o: us-east-1"
        echo ""
        echo "üöÄ PARA USAR A SOLU√á√ÉO:"
        echo "curl -X POST '$API_URL' \\"
        echo "  -H 'Content-Type: application/json' \\"
        echo "  -d '{\"cpf\":\"SEU_CPF_AQUI\"}'"
        echo ""
        echo "üìù Exemplo com CPF v√°lido:"
        echo "curl -X POST '$API_URL' \\"
        echo "  -H 'Content-Type: application/json' \\"
        echo "  -d '{\"cpf\":\"52998224725\"}'"