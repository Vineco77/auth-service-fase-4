name: Deploy Lambda to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: 'us-east-1'
  LAMBDA_FUNCTION_NAME: 'cpf-cognito-lambda-handler'

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Criar .env dinamicamente
      run: |
        echo "üîß Criando .env..."
        cat > .env << EOF
        COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }}
        NODE_ENV=production
        AWS_REGION=us-east-1
        EOF
        echo "‚úÖ .env criado com sucesso!"

    - name: Instalar depend√™ncias e empacotar Lambda
      run: |
        npm ci --production
        zip -r function.zip src/ node_modules/ package.json .env
        echo "üì¶ Package criado: function.zip"

    - name: Criar ou verificar Role IAM
      run: |
        echo "üõ°Ô∏è Verificando/Criando Role IAM..."
        
        # Verifica se a role j√° existe
        if aws iam get-role --role-name cpf-cognito-lambda-role 2>/dev/null; then
          echo "‚úÖ Role IAM j√° existe, continuando..."
        else
          echo "üìù Criando nova Role IAM..."
          aws iam create-role \
            --role-name cpf-cognito-lambda-role \
            --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}' \
            --description "Role para Lambda CPF Cognito"
          
          echo "‚è≥ Aguardando role ficar dispon√≠vel..."
          sleep 10
        fi
        
        # Anexa pol√≠ticas (idempotente - pode rodar m√∫ltiplas vezes)
        echo "üìã Anexando pol√≠ticas √† role..."
        aws iam attach-role-policy \
          --role-name cpf-cognito-lambda-role \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || echo "‚ÑπÔ∏è Pol√≠tica b√°sica j√° anexada"
        
        # Cria/atualiza policy customizada para Cognito
        echo "üîê Configurando pol√≠tica customizada do Cognito..."
        aws iam put-role-policy \
          --role-name cpf-cognito-lambda-role \
          --policy-name CognitoAccess \
          --policy-document '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "cognito-idp:AdminGetUser",
                  "cognito-idp:SignUp", 
                  "cognito-idp:AdminInitiateAuth",
                  "cognito-idp:AdminSetUserPassword",
                  "cognito-idp:AdminCreateUser"
                ],
                "Resource": "arn:aws:cognito-idp:us-east-1:'$(aws sts get-caller-identity --query Account --output text)':userpool/'${{ secrets.COGNITO_USER_POOL_ID }}'"
              }
            ]
          }'
        
        echo "‚úÖ Role IAM configurada com sucesso!"

    - name: Criar ou atualizar Lambda Function
      run: |
        echo "üöÄ Verificando/Criando Lambda Function..."
        
        # Obt√©m ARN da role
        ROLE_ARN=$(aws iam get-role --role-name cpf-cognito-lambda-role --query 'Role.Arn' --output text)
        echo "üîß Usando Role: $ROLE_ARN"
        
        # Verifica se a Lambda j√° existe
        if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME 2>/dev/null; then
          echo "üîÑ Lambda j√° existe, atualizando c√≥digo..."
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --zip-file fileb://function.zip
          
          echo "‚öôÔ∏è Atualizando configura√ß√£o da Lambda..."
          aws lambda update-function-configuration \
            --function-name $LAMBDA_FUNCTION_NAME \
            --environment "Variables={COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }},COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }},NODE_ENV=production}" \
            --timeout 15 \
            --memory-size 128 \
            --role "$ROLE_ARN" || echo "‚ÑπÔ∏è Configura√ß√£o j√° atualizada"
        else
          echo "üìù Criando nova Lambda Function..."
          aws lambda create-function \
            --function-name $LAMBDA_FUNCTION_NAME \
            --runtime nodejs18.x \
            --role "$ROLE_ARN" \
            --handler src/handlers/cpfHandler.handler \
            --zip-file fileb://function.zip \
            --environment "Variables={COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }},COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }},NODE_ENV=production}" \
            --timeout 15 \
            --memory-size 128
        fi
        
        echo "‚úÖ Lambda Function configurada com sucesso!"

    - name: Verificar deploy
      run: |
        echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
        echo "‚úÖ Lambda: $LAMBDA_FUNCTION_NAME"
        echo "üåê Regi√£o: us-east-1 (N. Virginia)"
        echo "üìä Status da Lambda:"
        aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME --query 'Configuration.[FunctionName, Runtime, Handler, State, LastUpdateStatus]' --output table

    - name: Teste r√°pido da Lambda
      run: |
        echo "üß™ Testando Lambda..."
        aws lambda invoke \
          --function-name $LAMBDA_FUNCTION_NAME \
          --payload '{"httpMethod":"POST","body":"{\"cpf\":\"12345678909\"}"}' \
          --cli-binary-format raw-in-base64-out \
          response.json || echo "‚ÑπÔ∏è Teste ignorado (poss√≠vel erro esperado sem API Gateway)"
        
        if [ -f response.json ]; then
          echo "üìÑ Resposta da Lambda:"
          cat response.json
          rm -f response.json
        fi