name: Deploy Lambda to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: 'us-east-1'
  LAMBDA_FUNCTION_NAME: 'cpf-cognito-lambda-handler'
  STACK_NAME: 'cpf-cognito-lambda-stack'

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Limpar recursos anteriores
      run: |
        echo "🧹 Limpando recursos anteriores..."
        
        # Verifica e deleta a Lambda se existir
        aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME 2>/dev/null && \
        aws lambda delete-function --function-name $LAMBDA_FUNCTION_NAME && \
        echo "✅ Lambda anterior deletada" || echo "ℹ️ Lambda não existia"
        
        # Limpa role IAM se existir
        aws iam get-role --role-name cpf-cognito-lambda-role 2>/dev/null && \
        aws iam delete-role --role-name cpf-cognito-lambda-role && \
        echo "✅ Role IAM deletada" || echo "ℹ️ Role IAM não existia"
      continue-on-error: true

    - name: Criar .env dinamicamente
      run: |
        echo "🔧 Criando .env..."
        cat > .env << EOF
        COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }}
        NODE_ENV=production
        AWS_REGION=us-east-1
        EOF
        echo "✅ .env criado com sucesso!"

    - name: Instalar dependências e empacotar Lambda
      run: |
        npm ci --production
        zip -r function.zip src/ node_modules/ package.json .env
        echo "📦 Package criado: function.zip"

    - name: Criar Lambda diretamente 
      run: |
        echo "🚀 Criando Lambda diretamente..."
        
        # Cria role IAM primeiro
        aws iam create-role \
          --role-name cpf-cognito-lambda-role \
          --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}' \
          --description "Role para Lambda CPF Cognito"
        
        # Anexa políticas à role
        aws iam attach-role-policy \
          --role-name cpf-cognito-lambda-role \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        
        # Cria policy customizada para Cognito
        aws iam put-role-policy \
          --role-name cpf-cognito-lambda-role \
          --policy-name CognitoAccess \
          --policy-document '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "cognito-idp:AdminGetUser",
                  "cognito-idp:SignUp", 
                  "cognito-idp:AdminInitiateAuth",
                  "cognito-idp:AdminSetUserPassword"
                ],
                "Resource": "arn:aws:cognito-idp:us-east-1:'$(aws sts get-caller-identity --query Account --output text)':userpool/'${{ secrets.COGNITO_USER_POOL_ID }}'"
              }
            ]
          }'
        
        echo "⏳ Aguardando role ficar disponível..."
        sleep 10
        
        # Cria a Lambda
        aws lambda create-function \
          --function-name $LAMBDA_FUNCTION_NAME \
          --runtime nodejs18.x \
          --role arn:aws:iam::'$(aws sts get-caller-identity --query Account --output text)':role/cpf-cognito-lambda-role \
          --handler src/handlers/cpfHandler.handler \
          --zip-file fileb://function.zip \
          --environment Variables="{COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }},COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }},NODE_ENV=production}" \
          --timeout 15 \
          --memory-size 128
        
        echo "✅ Lambda criada com sucesso!"

    - name: Verificar deploy
      run: |
        echo "🎉 DEPLOY CONCLUÍDO COM SUCESSO!"
        echo "✅ Lambda: $LAMBDA_FUNCTION_NAME"
        echo "🌐 Região: us-east-1 (N. Virginia)"
        aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME --query 'Configuration.[FunctionName, Runtime, Handler, State]' --output table