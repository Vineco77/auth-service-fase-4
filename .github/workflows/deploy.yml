name: Deploy Lambda to AWS

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - '.github/workflows/templates/lambda-template.yml'

env:
  AWS_REGION: 'us-east-1'
  LAMBDA_FUNCTION_NAME: 'cpf-cognito-lambda-handler'
  STACK_NAME: 'cpf-cognito-lambda-stack'
  ENVIRONMENT: 'production'

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get Git commit hash
      id: git-commit
      run: |
        echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Configurar AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Criar .env dinamicamente
      run: |
        echo "🔧 Criando .env..."
        cat > .env << EOF
        COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }}
        NODE_ENV=${{ env.ENVIRONMENT }}
        AWS_REGION=${{ env.AWS_REGION }}
        EOF
        echo "✅ .env criado com sucesso!"

    - name: Instalar dependências e empacotar Lambda
      run: |
        npm ci --production
        zip -r function-${{ steps.git-commit.outputs.commit }}.zip src/ node_modules/ package.json .env
        echo "📦 Package criado: function-${{ steps.git-commit.outputs.commit }}.zip"

    - name: Deploy CloudFormation Stack (Infrastructure Only)
      run: |
        echo "🚀 Criando/Atualizando infraestrutura..."
        aws cloudformation deploy \
          --template-file .github/workflows/templates/lambda-template.yml \
          --stack-name $STACK_NAME \
          --parameter-overrides \
            FunctionName=$LAMBDA_FUNCTION_NAME \
            CognitoUserPoolId=${{ secrets.COGNITO_USER_POOL_ID }} \
            CognitoClientId=${{ secrets.COGNITO_CLIENT_ID }} \
            Environment=$ENVIRONMENT \
          --capabilities CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset

    - name: Update Lambda Function Code
      run: |
        echo "🔄 Atualizando código da Lambda..."
        aws lambda update-function-code \
          --function-name $LAMBDA_FUNCTION_NAME \
          --zip-file fileb://function-${{ steps.git-commit.outputs.commit }}.zip
        echo "✅ Código da Lambda atualizado com sucesso!"

    - name: Verificar deploy
      run: |
        echo "🎉 DEPLOY CONCLUÍDO COM SUCESSO!"
        echo "✅ Lambda: $LAMBDA_FUNCTION_NAME"
        echo "🔧 Stack: $STACK_NAME"
        echo "🌐 Região: $AWS_REGION"
        echo "🔗 API URL:"
        aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text

    - name: Debug CloudFormation Failure
      if: failure()
      run: |
        echo "🔍 DEBUG - CloudFormation Stack Events:"
        aws cloudformation describe-stack-events \
          --stack-name $STACK_NAME \
          --query 'StackEvents[?contains(ResourceStatus, `FAILED`)].[LogicalResourceId, ResourceType, ResourceStatus, ResourceStatusReason]' \
          --output table