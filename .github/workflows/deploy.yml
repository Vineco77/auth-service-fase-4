name: Deploy Lambda Function

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: tech-challenge-lambda-code-${{ github.repository_id }}
  TF_WORKSPACE: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role-${{ env.TF_WORKSPACE }}
        role-session-name: GitHubActions-Deploy

    - name: Setup Terraform
      run: |
        cd terraform
        terraform workspace select $TF_WORKSPACE || terraform workspace new $TF_WORKSPACE
        terraform init

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan

    - name: Get Terraform outputs
      run: |
        cd terraform
        terraform output -json > tf_output.json
        echo "S3_BUCKET=$(jq -r '.lambda_s3_bucket_name.value' tf_output.json)" >> $GITHUB_ENV

    - name: Create deployment package
      run: |
        mkdir -p dist
        cp -r src node_modules package.json .env dist/
        cd dist && zip -r ../function.zip . && cd ..

    - name: Upload to S3
      run: |
        aws s3 cp function.zip s3://$S3_BUCKET/lambda-auth-function/${{ github.sha }}.zip

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan \
          -var="lambda_s3_bucket=$S3_BUCKET" \
          -var="lambda_s3_key=lambda-auth-function/${{ github.sha }}.zip" \
          -var="environment=$TF_WORKSPACE" \
          -out=tfplan

    - name: Cleanup
      run: rm -f function.zip