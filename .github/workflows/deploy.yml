name: Deploy Lambda to AWS

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - '.github/workflows/templates/lambda-template.yml'

env:
  AWS_REGION: 'us-east-1'
  LAMBDA_FUNCTION_NAME: 'cpf-cognito-lambda-handler'
  S3_BUCKET: 'cpf-cognito-lambda-artifacts'
  STACK_NAME: 'cpf-cognito-lambda-stack'

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Criar bucket S3 se n√£o existir
      run: |
        aws s3 ls s3://$S3_BUCKET || aws s3 mb s3://$S3_BUCKET --region $AWS_REGION

    - name: Criar .env dinamicamente para o package
      run: |
        echo "üîß Criando .env para o package..."
        cat > .env << EOF
        COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }}
        NODE_ENV=production
        AWS_REGION=us-east-1
        EOF
        echo "‚úÖ .env criado com sucesso!"

    - name: Instalar depend√™ncias e empacotar Lambda
      run: |
        npm ci --production
        zip -r function.zip src/ node_modules/ package.json .env
        echo "üì¶ Package criado: function.zip"

    - name: Fazer upload do c√≥digo para S3
      run: |
        aws s3 cp function.zip "s3://$S3_BUCKET/functions/function-latest.zip"
        echo "üì§ C√≥digo enviado para S3: s3://$S3_BUCKET/functions/function-latest.zip"

    - name: Verificar e limpar stack corrompido se necess√°rio
      run: |
        echo "üîç Verificando estado do CloudFormation stack..."
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_EXIST")
        
        if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "ROLLBACK_FAILED" ]; then
          echo "‚ö†Ô∏è Stack em estado corrompido ($STACK_STATUS). Deletando..."
          aws cloudformation delete-stack --stack-name $STACK_NAME --region $AWS_REGION
          echo "‚è≥ Aguardando dele√ß√£o..."
          sleep 30
          echo "‚úÖ Stack corrompido removido"
        elif [ "$STACK_STATUS" = "NOT_EXIST" ]; then
          echo "‚úÖ Stack n√£o existe, ser√° criado novo"
        else
          echo "‚úÖ Stack em estado saud√°vel: $STACK_STATUS"
        fi

    - name: Deploy CloudFormation Stack
      run: |
        echo "üöÄ Iniciando deploy do CloudFormation..."
        echo "üìã Par√¢metros:"
        echo "   Function: $LAMBDA_FUNCTION_NAME"
        echo "   User Pool: ${{ secrets.COGNITO_USER_POOL_ID }}"
        echo "   Client ID: ${{ secrets.COGNITO_CLIENT_ID }}"
        
        aws cloudformation deploy \
          --template-file .github/workflows/templates/lambda-template.yml \
          --stack-name $STACK_NAME \
          --parameter-overrides \
            FunctionName=$LAMBDA_FUNCTION_NAME \
            CognitoUserPoolId=${{ secrets.COGNITO_USER_POOL_ID }} \
            CognitoClientId=${{ secrets.COGNITO_CLIENT_ID }} \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Verificar deploy
      run: |
        echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
        echo "‚úÖ Lambda: $LAMBDA_FUNCTION_NAME"
        echo "üîß Stack: $STACK_NAME"
        echo "üåê Regi√£o: $AWS_REGION"